(()=>{"use strict";var t,e,r={615:(t,e,r)=>{r.r(e)},125:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.asc=e.currentDir=e.rootDirecory=void 0,e.setRootDirecory=function(t){e.rootDirecory=t,(0,n.getAndUpdateData)(e.rootDirecory,c)},e.setCurrentDir=function(){e.currentDir=e.rootDirecory},e.changeSort=function(){c===e.asc?(c=o,this.textContent="Сортировка по размеру (убывание)"):(c=e.asc,this.textContent="Сортировка по размеру (возрастание)"),(0,n.getAndUpdateData)(e.currentDir,c)},e.goIntoDirectory=function(t){"/"===e.currentDir&&(e.currentDir=""),e.currentDir="".concat(e.currentDir,"/").concat(t),(0,n.getAndUpdateData)(e.currentDir,c)},e.returnToPreviousDirectory=function(){if(e.currentDir!==e.rootDirecory){var t=e.currentDir.split("/");t.pop(),e.currentDir=t.join("/"),""===e.currentDir&&(e.currentDir="/"),(0,n.getAndUpdateData)(e.currentDir,c)}else alert("Вы достигли корневой директории")};var n=r(4);e.asc="asc";var o="desc",c=e.asc},970:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.fetchData=function(t,e){return fetch("/fs?dst=".concat(t,"&sort=").concat(e)).then((function(t){return t.ok?t.json():(alert("Произошла ошибка при загрузке данных. Пожалуйста, попробуйте позже."),[])})).then((function(t){return 200===t.status?(void 0===n.rootDirecory&&(0,n.setRootDirecory)(t.root_dir),t.data):(alert("Ошибка запроса: ".concat(t.text_error)),t.data)}))};var n=r(125)},4:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setShowCurrentDirectory=function(t){n=t},e.setPlaceholder=function(t){o=t},e.setContainerContent=function(t){c=t},e.removePlaceholder=d,e.getAndUpdateData=function(t,e){c.style.display="none",o.style.display="block",n.textContent=t,(0,a.fetchData)(t,e).then((function(t){void 0!==i.currentDir?(function(t){var e=document.getElementById("file-table").getElementsByTagName("tbody")[0];e.innerHTML="",t.forEach((function(t){e.appendChild(function(t){var e=document.createElement("tr"),r=document.createElement("td"),n=document.createElement("td"),o=document.createElement("td");return r.textContent=t.file_name,n.textContent="".concat(t.file_size.toFixed(2)," ").concat(t.file_size_type),o.textContent=t.file_type,e.appendChild(r),e.appendChild(n),e.appendChild(o),"Директория"===t.file_type&&(e.classList.add("direct_style"),e.addEventListener("click",(function(){(0,i.goIntoDirectory)(t.file_name)}))),r.classList.add("row_table_style"),n.classList.add("row_table_style"),o.classList.add("row_table_style"),e.classList.add("row_table_style"),e}(t))}))}(t),d()):(0,i.setCurrentDir)()}))};var n,o,c,a=r(970),i=r(125);function d(){c.style.display="block",o.style.display="none"}}},n={};function o(t){var e=n[t];if(void 0!==e)return e.exports;var c=n[t]={exports:{}};return r[t](c,c.exports,o),c.exports}o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},t=o(4),e=o(125),o(615),document.addEventListener("DOMContentLoaded",(function(){!function(){var r=document.getElementById("sort-button");r&&r.addEventListener("click",e.changeSort);var n=document.getElementById("back-button");n&&n.addEventListener("click",e.returnToPreviousDirectory);var o=document.getElementById("current-directory");(0,t.setShowCurrentDirectory)(o);var c=document.getElementById("container-data");(0,t.setContainerContent)(c);var a=document.getElementById("placeholder");(0,t.setPlaceholder)(a),(0,t.getAndUpdateData)("/home",e.asc)}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,